package com.bcits.discom.dao;

import java.util.Date;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.EntityTransaction;
import javax.persistence.PersistenceUnit;
import javax.persistence.Query;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import com.bcits.discom.beans.ConsumerMasterBean;
import com.bcits.discom.beans.CurrentBillBean;
import com.bcits.discom.beans.EmployeeMasterBean;
import com.bcits.discom.beans.MonthlyConsumptionBean;
import com.bcits.discom.beans.MonthlyConsumptionPK;

import javassist.bytecode.stackmap.BasicBlock.Catch;

@Repository
public class EmployeeDAOImplementation implements EmployeeDAO {

	@PersistenceUnit
	EntityManagerFactory factory;

	@Autowired
	private TarrifCalculation tarrifCalculation;

	@Override
	public EmployeeMasterBean employeeLogin(int empId, String password) {
		EntityManager manager = factory.createEntityManager();
		EmployeeMasterBean employeeBean= manager.find(EmployeeMasterBean.class, empId);

		if(employeeBean != null && employeeBean.getPassword().equals(password)) {
			return employeeBean;
		}
		return null;
	}


	@Override
	public long numOfConsumer(String region) {
		EntityManager manager = factory.createEntityManager();
		String jpql=" select count(*) from ConsumerMasterBean where region=:region ";
		Query query=manager.createQuery(jpql);
		query.setParameter("region", region);
		long num=(long) query.getSingleResult();
		if(num != 0) {
			return num;
		}
		return 0;
	}

	@Override
	public boolean addEmployee(EmployeeMasterBean employeeBean) {
		EntityManager manager = factory.createEntityManager();
		EntityTransaction transaction=manager.getTransaction();
		boolean isAdded=false;
		try{
			transaction.begin();
			manager.persist(employeeBean);
			transaction.commit();
			isAdded = true;
		}catch(Exception e) {
			e.printStackTrace();
		}finally {
			manager.close();
		}
		return isAdded;
	}

	@Override
	public List<ConsumerMasterBean> showAllConsumers(String region) {
		EntityManager manager = factory.createEntityManager();
		String jpql= " from ConsumerMasterBean where region=:region";
		Query query= manager.createQuery(jpql);
		query.setParameter("region", region);

		List<ConsumerMasterBean> consumerList = (List<ConsumerMasterBean>) query.getResultList();
		if(consumerList !=null) {
			return consumerList;
		}
		return null;
	}


	@Override
	public boolean addCurrentBill(CurrentBillBean currentBill) {
		
		/*double unitsConsumed = 0.0;
		long initialReading =0l;
		EntityManager manager = factory.createEntityManager();
		EntityTransaction transaction =manager.getTransaction();
		CurrentBillBean currentBillBean = manager.find(CurrentBillBean.class, currentBill.getRrNumber());
		String jpql = " from ConsumerMasterBean where rrNumber=:rrNumber ";
		Query query = manager.createQuery(jpql);
		query.setParameter("rrNumber", currentBillBean.getRrNumber());
		ConsumerMasterBean consumerMasterBean =(ConsumerMasterBean) query.getSingleResult();
		
		
		
		if(consumerMasterBean != null) {
			if(currentBillBean != null) {
				initialReading = currentBillBean.getFinalReading();
				MonthlyConsumptionPK consumptionPK = new MonthlyConsumptionPK();
				MonthlyConsumptionBean consumptionBean = new MonthlyConsumptionBean();
				consumptionBean.setTotalAmount(currentBillBean.getTotalAmount());
				consumptionBean.setStatus("Not Paid");
				consumptionBean.setInitialReading(currentBillBean.getInitialReading());
				consumptionBean.setFinalReading(currentBillBean.getFinalReading());
				consumptionBean.setUnitsConsumed(unitsConsumed);
				consumptionBean.setConsumptionPk(consumptionPK);
				consumptionPK.setDate(new Date());
				consumptionPK.setRrNumber(currentBillBean.getRrNumber());
				consumptionBean.setConsumptionPk(consumptionPK);
				
				transaction.begin();
				//manager.persist(consumptionPK);
				manager.persist(consumptionBean);
				transaction.commit();
				
				unitsConsumed = currentBill.getFinalReading() - initialReading;
				
				try {
					TarrifCalculation tarrif = new TarrifCalculation();
					
					double totalAmount = tarrif.billCalculation(unitsConsumed, consumerMasterBean.getTypeOfConsumer());
					
					transaction.begin();
					
					currentBillBean.setInitialReading(initialReading);
					currentBillBean.setUnitsConsumed(unitsConsumed);
					currentBillBean.setTotalAmount(totalAmount);
					currentBillBean.setFinalReading(currentBill.getFinalReading());
					currentBillBean.setDueDate(currentBill.getDueDate());
					
					transaction.commit();
					
				currentBill.setTotalAmount(totalAmount);
				currentBill.setUnitsConsumed(unitsConsumed);
				currentBill.setDate(new Date());
					
			}catch(Exception e) {
				e.printStackTrace();
			}
		}
			manager.close();
			return true;
		}
	
		return false;
	}*/
		
		
		
		
		double unitsConsumed = currentBill.getFinalReading() - currentBill.getInitialReading();
		
		EntityManager manager = factory.createEntityManager();
		EntityTransaction transaction =manager.getTransaction();
		
		MonthlyConsumptionPK consumptionPK = new MonthlyConsumptionPK();
		MonthlyConsumptionBean consumptionBean = new MonthlyConsumptionBean();
		
		CurrentBillBean currentBillBean = manager.find(CurrentBillBean.class, currentBill.getRrNumber());
		
		double totalAmount = tarrifCalculation.billCalculation(unitsConsumed, currentBill.getRrNumber());
		
		try {
			transaction.begin();
			if(currentBillBean != null) {
				manager.close();
			}
			
			consumptionPK.setDate(new Date());
			consumptionPK.setRrNumber(currentBillBean.getRrNumber());
			consumptionBean.setConsumptionPk(consumptionPK);
			
			consumptionBean.setTotalAmount(totalAmount);
			consumptionBean.setStatus("Not Paid");
			consumptionBean.setInitialReading(currentBillBean.getInitialReading());
			consumptionBean.setFinalReading(currentBillBean.getFinalReading());
			consumptionBean.setUnitsConsumed(unitsConsumed);
			
			currentBill.setTotalAmount(totalAmount);
			currentBill.setUnitsConsumed(unitsConsumed);
			
			manager.persist(consumptionBean);
			manager.persist(currentBill);
			transaction.commit();
		}catch(Exception e) {
			e.printStackTrace();
		}
	}
}

