package com.bcits.springmvc.crud.operation;

import java.util.Date;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.EntityTransaction;
import javax.persistence.Persistence;
import javax.persistence.PersistenceUnit;
import javax.persistence.Query;

import org.springframework.stereotype.Repository;
@Repository
public class EmployeeImpl implements EmployeeDAO{
	
	@PersistenceUnit
	private EntityManagerFactory factory;
	
	@Override
	public boolean addEmployee(EmployeeInfoBean bean) {
		EntityManager manager=factory.createEntityManager();
		EntityTransaction transaction=manager.getTransaction();
		
		boolean isAdded=false;
		try {
			transaction.begin();
			manager.persist(bean);
			transaction.commit();
			isAdded=true;
		}catch(Exception e) {
			e.printStackTrace();
		}finally {
		manager.close();
		}
		return false;
	}

	@Override
	public boolean deleteEmployee(int empId) {
		boolean isDeleted=false;
		
		EntityManager manager=factory.createEntityManager();
		EmployeeInfoBean employeeInfoBean=manager.find(EmployeeInfoBean.class, empId);
		
		if(employeeInfoBean != null) {
			EntityTransaction transaction=manager.getTransaction();
			transaction.begin();
			manager.remove(employeeInfoBean);
			transaction.commit();
			isDeleted=true;
		}
		manager.close();
		return false;
	}

	@Override
	public boolean updateEmployee(EmployeeInfoBean bean) {
		EntityManager manager=factory.createEntityManager();
		EntityTransaction transaction=manager.getTransaction();
		
		int empId=bean.getEmpId();
		String bloodGroup=bean.getBloodGroup();
		int deptId=bean.getDeptId();
		String designation=bean.getDesignation();
		Date dob=bean.getDob();
		Date doj=bean.getDoj();
		int managerId=bean.getManagerId();
		long mobileNumber=bean.getMobileNumber();
		String name=bean.getName();
		String officialMailId=bean.getOfficialMailId();
		String password=bean.getPassword();
		Double salary=bean.getSalary();
		
		EmployeeInfoBean employeeInfoBean=manager.find(EmployeeInfoBean.class, empId);
		
		if(employeeInfoBean !=null) {
			try {
				transaction.begin();
				employeeInfoBean.setBloodGroup(bloodGroup);
				employeeInfoBean.setDeptId(deptId);
				employeeInfoBean.setDesignation(designation);
				employeeInfoBean.setDob(dob);
				employeeInfoBean.setDoj(doj);
				employeeInfoBean.setEmpId(empId);
				employeeInfoBean.setManagerId(managerId);
				employeeInfoBean.setMobileNumber(mobileNumber);
				employeeInfoBean.setName(name);
				employeeInfoBean.setOfficialMailId(officialMailId);
				employeeInfoBean.setPassword(password);
				employeeInfoBean.setSalary(salary);
			}
		}
		
		return false;
	}


	@Override
	public List<EmployeeInfoBean> getAllEmployees() {
		EntityManager manager=factory.createEntityManager();
		
		String jpql=" from EmployeePrimaryInfo ";
		Query query= manager.createQuery(jpql);
		
		return null;
	}

	@Override
	public EmployeeInfoBean getEmployee(int empId) {
		EntityManager manager=factory.createEntityManager();
		EmployeeInfoBean employeeInfoBean=manager.find(EmployeeInfoBean.class, empId);
		manager.close();
		return null;
	}

	@Override
	public EmployeeInfoBean authenticate(int empId, String password) {
		EntityManager manager=factory.createEntityManager();
		EmployeeInfoBean employeeInfoBean=manager.find(EmployeeInfoBean.class, empId);
		
		if(employeeInfoBean!=null && employeeInfoBean.getPassword().equals(password)) {
			return employeeInfoBean;
		}else {
			return null;
		}
	}

}
