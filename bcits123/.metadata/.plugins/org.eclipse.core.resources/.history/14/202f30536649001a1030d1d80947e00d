package com.bcits.discom.dao;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.EntityTransaction;
import javax.persistence.PersistenceUnit;
import javax.persistence.Query;

import org.springframework.stereotype.Repository;

import com.bcits.discom.beans.AdminBean;
import com.bcits.discom.beans.ConsumerMasterBean;
import com.bcits.discom.beans.CurrentBillBean;
import com.bcits.discom.beans.EmployeeMasterBean;

@Repository
public class EmployeeDAOImplementation implements EmployeeDAO {
	
	@PersistenceUnit
	EntityManagerFactory factory;

	@Override
	public EmployeeMasterBean employeeLogin(int empId, String password) {
		EntityManager manager = factory.createEntityManager();
		EmployeeMasterBean employeeBean= manager.find(EmployeeMasterBean.class, empId);
		
		if(employeeBean != null && employeeBean.getPassword().equals(password)) {
			return employeeBean;
		}
		return null;
	}

	@Override
	public AdminBean adminLogin(int adminId, String password) {
		EntityManager manager = factory.createEntityManager();
		AdminBean adminBean= manager.find(AdminBean.class, adminId);
		
		if(adminBean != null && adminBean.getPassword().equals(password)) {
			return adminBean;
		}
		return null;
	}

	@Override
	public long numOfConsumer(String region) {
		EntityManager manager = factory.createEntityManager();
		String jpql=" select count(*) from ConsumerMasterBean where region=:region ";
		Query query=manager.createQuery(jpql);
		query.setParameter("region", region);
		long num=(long) query.getSingleResult();
		if(num != 0) {
			return num;
		}
		return 0;
	}

	@Override
	public boolean addEmployee(EmployeeMasterBean employeeBean) {
		EntityManager manager = factory.createEntityManager();
		EntityTransaction transaction=manager.getTransaction();
		boolean isAdded=false;
		try{
			transaction.begin();
			manager.persist(employeeBean);
			transaction.commit();
			isAdded = true;
		}catch(Exception e) {
			e.printStackTrace();
		}finally {
			manager.close();
		}
		return isAdded;
	}

	@Override
	public List<ConsumerMasterBean> showAllConsumers(String region) {
		EntityManager manager = factory.createEntityManager();
		String jpql= " from ConsumerMasterBean where region=:region";
		Query query= manager.createQuery(jpql);
		query.setParameter("region", region);
		
		List<ConsumerMasterBean> consumerList = (List<ConsumerMasterBean>) query.getResultList();
		if(consumerList !=null) {
			return consumerList;
		}
		return null;
	}

	@Override
	public boolean addCurrentBill(CurrentBillBean currentBill, double amount) {
		return false;
	}

	@Override
	public ConsumerMasterBean getConsumer(String rrNumber) {
		EntityManager manager = factory.createEntityManager();
		ConsumerMasterBean consumerBean = manager.find(ConsumerMasterBean.class, rrNumber);
		if(consumerBean != null) {
			return consumerBean;
		}
		manager.close();
		return null;
	}

	@Override
	public long getInitialReading(String rrNumber) {
		EntityManager manager = factory.createEntityManager();
		double initialRead;
		try {
			String jpql =" select finalReading from MonthlyConsumptionBean where rrNumber=:rrNumber order by finalReading desc ";
			Query query= manager.createQuery(jpql);
			query.setMaxResults(1);
			query.setParameter("rrNumber", rrNumber);
			initialRead = (double) query.getSingleResult();
		}catch (Exception e) {
			return 0;
		}
		if(initialRead != 0) {
			return initialRead;
		}
		return 0;
	}

}
